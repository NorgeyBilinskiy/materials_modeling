#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞.
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
"""

import os
import sys
import tempfile
import shutil


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from src.data_loader import download_nacl_data, create_sample_nacl_data
        from src.data_loader import preprocess_data, create_graph_features
        from src.models.cgcnn import create_cgcnn_model
        from src.models import create_megnet_model
        from src.models.schnet.model import create_schnet_model
        from src.models.mpnn.model import create_mpnn_model
        
        print("‚úì –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_data_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        test_dir = tempfile.mkdtemp()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        from src.data_loader import create_sample_nacl_data, create_training_dataset
        create_sample_nacl_data(test_dir)
        create_training_dataset(test_dir)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        required_files = [
            "nacl.cif",
            "nacl_info.json", 
            "training_data.json",
            "training_data.csv"
        ]
        
        for file in required_files:
            if os.path.exists(os.path.join(test_dir, file)):
                print(f"‚úì –§–∞–π–ª {file} —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"‚úó –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(test_dir)
        print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_model_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        models = {
            'CGCNN': create_cgcnn_model,
            'MEGNet': create_megnet_model,
            'SchNet': create_schnet_model,
            'MPNN': create_mpnn_model
        }
        
        for name, model_func in models.items():
            model = model_func()
            print(f"‚úì –ú–æ–¥–µ–ª—å {name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –º–æ–¥–µ–ª–∏
            if hasattr(model, 'forward'):
                print(f"  - –ú–µ—Ç–æ–¥ forward() –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"  ‚úó –ú–µ—Ç–æ–¥ forward() –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        print("‚úì –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_graph_features():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    try:
        from pymatgen.core import Structure, Lattice
        from src.data_loader import create_graph_features
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        lattice = Lattice.cubic(5.64)
        structure = Structure(
            lattice=lattice,
            species=["Na", "Cl"],
            coords=[[0, 0, 0], [0.5, 0.5, 0.5]]
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        node_features, edge_index, edge_attr = create_graph_features(structure)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        import torch
        assert isinstance(node_features, torch.Tensor), "node_features –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å torch.Tensor"
        assert isinstance(edge_index, torch.Tensor), "edge_index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å torch.Tensor"
        assert isinstance(edge_attr, torch.Tensor), "edge_attr –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å torch.Tensor"
        
        print(f"‚úì –ì—Ä–∞—Ñ–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"  - node_features: {node_features.shape}")
        print(f"  - edge_index: {edge_index.shape}")
        print(f"  - edge_attr: {edge_attr.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return False

def test_cli_interface():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ CLI
        from run import cli
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥
        commands = ['train', 'predict', 'compare', 'setup', 'info']
        
        for cmd in commands:
            if hasattr(cli, cmd):
                print(f"‚úì –ö–æ–º–∞–Ω–¥–∞ {cmd} –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print(f"‚úó –ö–æ–º–∞–Ω–¥–∞ {cmd} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        print("‚úì CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê NaCl FORMATION ENERGY PREDICTION")
    print("=" * 60)
    
    tests = [
        test_imports,
        test_data_creation,
        test_model_creation,
        test_graph_features,
        test_cli_interface
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print("=" * 60)
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. python run.py setup")
        print("2. python run.py train --method cgcnn")
        print("3. python run.py predict --method cgcnn")
        print("4. python run.py compare")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏–∏ PyTorch –∏ PyTorch Geometric")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

